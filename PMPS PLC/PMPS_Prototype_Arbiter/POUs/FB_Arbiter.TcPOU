<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_Arbiter" Id="{9cc1f6b7-c43c-0fbb-09be-271b21ce1be7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Arbiter
VAR_INPUT
	i_nStateID	:	INT;
	i_stAssertBeamParams	:	ST_BeamParams;
END_VAR
VAR_OUTPUT
	q_stBeamParams	:	ST_BeamParams;
	q_xStateIDFound	:	BOOL;
END_VAR
VAR
	fbBPAssertionPool	:	FB_BeamParamAssertionPool;
	getPosPtr	: POINTER TO T_HashTableEntry := 0;
	getBPStruct	:	ST_BeamParams;
	stOutputBP	:	ST_BeamParams; //Safest beam parameters from all in the assertion pool
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

//Arbitrate
(*
This step cycles through every hash table entry, comparing
the beam parameters from each assertion to what we're planning
to assert.

The safer of the two parameters is kept so at the end we may
have a mix of beam parameters, the composition being safe for
all asserters.

*)

//Safest parameters to start
stOutputBP := F_SetBeamParams(
	fAtt := 100,
	fPP_mJ := 0,
	fLower_eV := 0,
	fUpper_eV := 1800
	);

fbBPAssertionPool.A_GetFirst( putPosPtr := 0, getPosPtr=>getPosPtr, getValue=>getBPStruct );
IF fbBPAssertionPool.bOk THEN
	
	//The first entry in the hash table is taken as the setting to arbitrate against
	stOutputBP := F_SetBeamParams(
		fAtt := getBPStruct.fAtt,
		fPP_mJ := getBPStruct.fPP_mJ,
		fLower_eV := getBPStruct.fLower_eV,
		fUpper_eV := getBPStruct.fUpper_eV
	);

	REPEAT
		fbBPAssertionPool.A_GetNext( putPosPtr := fbBPAssertionPool.getPosPtr , getPosPtr=>getPosPtr, getValue=>getBPStruct );
		IF fbBPAssertionPool.bOk THEN
			A_Arbitrate();
		END_IF
	UNTIL NOT fbBPAssertionPool.bOk
	END_REPEAT

END_IF

q_stBeamParams := stOutputBP;]]></ST>
    </Implementation>
    <Action Name="A_Arbitrate" Id="{cd232571-a3df-0041-3bcc-1fe44a9b9a88}">
      <Implementation>
        <ST><![CDATA[
//Attenuation
//Add something here to register the key that won for each param
stOutputBP.fAtt := MAX(stOutputBP.fAtt, getBPStruct.fAtt);

//Pulse energy
stOutputBP.fPP_mJ := MIN(stOutputBP.fPP_mJ, getBPStruct.fPP_mJ);

stOutputBP.fLower_eV := MAX(stOutputBP.fLower_eV, getBPStruct.fLower_eV);
stOutputBP.fUpper_eV := MIN(stOutputBP.fUpper_eV, getBPStruct.fUpper_eV);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_AssertBP" Id="{f6e89361-055c-0560-0933-bcdd7d87f7bb}">
      <Implementation>
        <ST><![CDATA[//fbTable.A_Add( key := 12345, putValue := putValue, getPosPtr=>getPosPtr, getValue=>getValue );
fbBPAssertionPool.A_Add(
	key := i_nStateID,
	putValue := i_stAssertBeamParams,
	getPosPtr=>getPosPtr,
	getValue => getBPStruct
);

IF NOT fbBPAssertionPool.bOk THEN
	; //Overflow <TODO>
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_VerifyAssertion" Id="{905e28be-7804-0837-3111-bddd3e35d311}">
      <Implementation>
        <ST><![CDATA[


fbBPAssertionPool.A_Lookup( key := i_nStateID, getPosPtr=>getPosPtr, getValue=>getBPStruct );


q_xStateIDFound	:= fbBPAssertionPool.bOk;
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_Arbiter">
      <LineId Id="16" Count="40" />
      <LineId Id="9" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="FB_Arbiter.A_Arbitrate">
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Arbiter.A_AssertBP">
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="3" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="1" />
    </LineIds>
    <LineIds Name="FB_Arbiter.A_VerifyAssertion">
      <LineId Id="9" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>