<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_PhotonEnergyWatcher_Test" Id="{0fcbd199-c111-05e5-208f-efd836b137da}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_PhotonEnergyWatcher_Test EXTENDS FB_TestSuite IMPLEMENTS I_RunnableTestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbAssert : TcUnit.FB_Assert;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{abd746e0-90e2-04be-08b3-63a259c2c23d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.RegisterTestSuite(THIS^);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PEWatcherBasicFunction" Id="{70274a01-fe93-0062-336d-e1158923f781}">
      <Declaration><![CDATA[METHOD PRIVATE PEWatcherBasicFunction
VAR_INPUT
END_VAR
VAR
	fbPEW	:	FB_PhotonEnergyWatcher;
	fbFF	:	FB_FastFault;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Initialize arbiter
fbArbiter.A_Init();

//Call BPTM with requested final state and transition state
fbBPTM(
	fbArbiter := fbArbiter,
	i_TransitionAssertionID := nTransitionID,
	i_stTransitionAssertion := stTransitionAssertion,
	
	i_nRequestedAssertionID := nReqID,
	i_stRequestedAssertion := stReqAssertion
);

TEST('BPTMAssertsTransitionBeforeFinal');
	
//Second pass should move into waiting for transition assertion, arbiter should have transition id
fbBPTM(fbArbiter:= fbArbiter);

fbAssert.AssertTrue(
	fbBPTM.UML_SC_BeamParameterTransitionManager.States[fbBPTM.UML_SC_BeamParameterTransitionManager.Names.WaitingForTransitionAssertion].Active,
	'BPTM did not move into Waiting for transition assertion'); 
	
fbArbiter.A_VerifyAssertion(i_nStateID := nTransitionID);
fbAssert.AssertTrue(fbArbiter.q_xStateIDFound, 'Arbiter did not accept BPTM transition assertion');]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTests" Id="{976dac7f-a350-02ab-3863-62d5a7981b89}">
      <Declaration><![CDATA[METHOD RunTests : TCUNIT.E_TestSuiteRunState
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PEWatcherBasicFunction();

RunTests := TcUnit.E_TestSuiteRunState.FINISHED;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PhotonEnergyWatcher_Test">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_PhotonEnergyWatcher_Test.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_PhotonEnergyWatcher_Test.PEWatcherBasicFunction">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="23" Count="5" />
      <LineId Id="22" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_PhotonEnergyWatcher_Test.RunTests">
      <LineId Id="4" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>